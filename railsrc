#!/usr/bin/ruby
if Rails.version =~ /^3/
  # Rails prompt
  app_name = Rails.application.class.parent_name.downcase
  app_env  = Rails.env[0...3]
  IRB.conf[:PROMPT] ||= {}
  IRB.conf[:PROMPT][:RAILS] = {
    :PROMPT_I => "#{ app_name }(#{ app_env })> ",
    :PROMPT_N => "#{ app_name }(#{ app_env })| ",
    :PROMPT_C => "#{ app_name }(#{ app_env })| ",
    :PROMPT_S => "#{ app_name }(#{ app_env })%l ",
    :RETURN => "=> %s\n",
    :AUTO_INDENT => true,
  }
  IRB.conf[:PROMPT_MODE] = :RAILS

# named routes
  include Rails.application.routes.url_helpers
  default_url_options[:host] = Rails.application.class.parent_name.downcase

  def change_log(stream)
    ActiveRecord::Base.logger = Logger.new(stream)
    ActiveRecord::Base.clear_active_connections!
  end

  def show_log
    change_log(STDOUT)
  end

  def hide_log
    change_log(nil)
  end
else
  begin
   # load wirble
   require 'rubygems'
   require 'wirble'

   # start wirble (with color)
   Wirble.init
   Wirble.colorize
  rescue LoadError => err
   warn "Couldn't load Wirble: #{err}"
  end

  if ENV.include?('RAILS_ENV')
   
    def show_log
      change_log(STDOUT)
    end

    def hide_log
      change_log(nil)
    end

    def change_log(stream, colorize=true)
      require 'activerecord'
      ActiveRecord::Base.logger = ::Logger.new(stream)
      ActiveRecord::Base.clear_all_connections!
      ActiveRecord::Base.colorize_logging = colorize
    end

    if ENV['INLINE_LOGGING'] && !Object.const_defined?('RAILS_DEFAULT_LOGGER')
      require 'logger'
      Object.const_set('RAILS_DEFAULT_LOGGER', Logger.new(STDOUT))
    end

    def enable_factories
      require 'factory_girl'
      Factory.definition_file_paths = [
        Rails.root.join("test/factories"),
        Rails.root.join("spec/factories")
      ]
      Factory.find_definitions
    end

    show_log

  end

  class Object
    def interest
      self.methods.sort - Object.methods
    end
  end
  
end
